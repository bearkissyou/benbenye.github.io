[{"title":"TODO-4：nodejs 实现一部漫画爬取","date":"2017-01-03T07:23:00.000Z","path":"2017/01/03/TODO-4：nodejs 实现一部漫画爬取/","text":"很早之前一直很喜欢听一些有声评书，当时为了找这些音频也是煞费苦心。但是找的过程中也发现，我每次下载音频的时候都是在重复同样的操作，所以也想过是不是可以用程序实现。那时候并没有很强的意念去实现是这个工具，所以只是停留在了想的层面。 前不久无意发现一部感觉不错的动漫《镇魂街》，看了动画片之后觉得不过瘾，又发现官方的漫画版还挺有看头的，于是又从头开始后撸漫画，但是发现一页一页的翻翻找找好累，所以又想着把这些图片一次性down下来该多爽。正巧手头有个ng2的项目，于是借助这个框架开始尝试爬取这部漫画，没有广告，没有连接，简单粗暴直接看图。 抓取网页的几个必要工具先罗列一下： superagent github 地址 代替客户端发起请求； cheerio github地址 解析html fs node 的文件系统模块 首先找个稳定点的网站用来抓取，不然刚研究好怎么解析这个网站下的页面，结果页面不稳定，白费力气。解析的思路一定是顺序的，首先要把一部漫画的章节找出来，然后根据每个章节下载里面的图片。 下面说说我在抓取的过程遇到的几个小问题：1：编码问题；默认情况下superagent是utf-8的编码，但是如果遇到网站的编码不是utf-8就会出现抓取下来的页面都是乱码，自然就不好解析了。所以出现这种情况的时候，可以在发起请求的时候添加编码设置，这就涉及到了第四个必要工具：superagent-charset，github地址，防止乱码用的。2：请求头的问题；一般这种网站都会有防盗链的措施，所以如果随意请求，很快就会被反套路，所以最安全的方案就是用浏览器打开需要抓取的页面，找到相应的网络请求头，全copy下来，不过要特别注意一下有的Referer这个字段是固定的连接，但是有的是根据章节，每个章节不同。3：请求‘顺序’还是‘并发’最初使用并发的形式抓取，但是会出现抓取的图片不全的现象。这种情况还不是很清楚什么原因导致的。不过转为顺序并且把每次请求都间隔了一定时间，尽量的模仿实际人工请求，没有出现抓取不全的现象。 下面是主要代码逻辑： 用来统一设置请求头的方法： 123456789101112131415function makeReuest(option)&#123; return request.get(option.url).charset('gbk') .set('Accept','text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8') // .set('Accept-Encoding','gzip, deflate, sdch') .set('Accept-Language','zh-CN,zh;q=0.8,en;q=0.6') .set('Cache-Control','no-cache') .set('Connection','keep-alive') .set('Cookie',option.cookie) .set('Host',option.host) .set('Pragma','no-cache') .set('Referer',option.referer) // .set('Upgrade-Insecure-Requests','1') .set('User-Agent','Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36') .catch(option.cb); &#125; 所有callback转为promise形式12345678910111213module.exports = function (func, option = &#123;&#125;) &#123; return (...arg) =&gt; new Promise((resolve, reject) =&gt; &#123; return func.apply(option.context, [...arg, (err, ...data) =&gt; &#123; if (err) &#123; return reject(err); &#125; if (option.multiArg) &#123; return resolve(data) &#125; return resolve(data[0]); &#125;]); &#125;)&#125; 写文件逻辑： 123456789101112131415161718192021const writeFileAsync = promisify(fs.writeFile);const mkdirAsync = promisify(fs.mkdir);writeFileAsync(imgPath, _picRes.body) .then(function () &#123; console.log('write OK:', imgPath) &#125;) .catch(function () &#123; console.log('write err:', imgPath) mkdirAsync(path) .then(function () &#123; return writeFileAsync(imgPath, _picRes.body) &#125;) .then(function () &#123; console.log('write file retry finished:', imgPath) &#125;) .catch(function (err) &#123; console.log('retry err', err) throw err; &#125;); &#125;);","tags":[]},{"title":"使用 npm 私有仓库安装依赖遇到的坑","date":"2016-11-17T09:14:00.000Z","path":"2016/11/17/使用 npm 私有仓库安装依赖遇到的坑/","text":"最近项目部署的时候时常遇到访问 npm 官方仓库网络抽疯的现象，决定尝试一下公司内部新搭建的私有仓库（使用的 cnpm）。切换个仓库这么简单的事没想到遇到两个大坑，记录一下： tarball url 指向不正确 问题：用npm i --registry=https://rnpm.xxxxx.com xxx 命令安装时，结果却到 r.cnpmjs.org 这个域下面下载tar包。原因：仓库的registryHost配置错误。 项目部署的时候大部分依赖包还是去官方仓库下载 问题：使用npm i --registry=https://rnpm.xxxxx.com命令安装依赖的时候发现registry参数似乎不起作用，绝大多数包居然又到官方的仓库去拉取数据（包括 metadata 和 tarball），但奇怪的是居然还有两三个包是正常的到 rnpm.xxxxx.com 域去下载数据了。 原因：因为用 npm shrinkwrap 命令锁定了依赖，而 npm-shrinkwrap.json 里有个 resolved字段，这个字段指定了tarball下载的地址，npm使用这个地址下载了真正的依赖包。 解决办法：目前还没有好的解决办法，暂时先替换掉resolved字段里的 url，npm@5之后的版本应该会提供一个优雅的解决方案。s替换url的方法： 1sed -i -- 's/https:\\/\\/registry\\.npmjs\\.org/https:\\/\\/rnpm\\.xxxxx\\.com/g' npm-shrinkwrap.json 其他的方案还有: shonkwrap rewrite-shrinkwrap-urls 参考：https://github.com/npm/npm/issues/6445 https://github.com/npm/npm/issues/6324 http://blog.npmjs.org/post/145724408060/dealing-with-problematic-dependencies-in-a https://support.sonatype.com/hc/en-us/articles/213465048-Why-does-npm-client-need-access-to-URLs-other-than-my-private-registry- http://stackoverflow.com/questions/33682804/why-does-npm-install-use-the-shrinkwraps-resolved-property","tags":[]},{"title":"TODO-3：css relative and absolute","date":"2016-11-14T03:42:00.000Z","path":"2016/11/14/TODO-3：css relative and absolute/","text":"css中很多属性都是很近似的，平时在项目中使用并不会太在意两者之间的区别，之前在css定位上吃过亏，这次细致的解析一下。 1css position: fixed | static | absolute | relative | center | page | sticky static 和 fixed 的概念很简单，这里不做详细解释。 center page sticky 属于css3新增属性。 relative 相对定位，它的地位计算基于自身在文档中的位置，同时会占用文档流，使用top right bottom left 时不会影响到页面中其他元素的位置（除非在这个元素中含有带有定位的元素）。 absolute 绝对定位，它的定位计算基于父元素，父元素没有则向上追溯，直到body 应用了absolute 的元素会脱离文档流，不在页面中占位，使用top right bottom left 时也不会影响到页面中其他元素的位置（除非在这个元素中含有带有定位的元素）。 下面是我写的关于absolute relative 的demo","tags":[]},{"title":"linux 下使用\"n\"配置使用淘宝镜像","date":"2016-10-29T04:16:00.000Z","path":"2016/10/29/linux 下使用\"n\"配置使用淘宝镜像/","text":"n 是 nodejs 版本管理器，鉴于国内网络环境，作如下配置用起来才会便捷. 12345678# ~/.bashrc 或 ~/.zshrc# 使用淘宝 nodejs 镜像，注意末尾的'/'不能省略export NODE_MIRROR=https://npm.taobao.org/dist/# 建议 linux 用户配置 nodejs 安装目录，切换版本不用 root 权限export N_PREFIX=$HOME/.nexport PATH=$HOME/.n/bin:$PATH","tags":[]},{"title":"TODO-2：浏览器唤醒APP","date":"2016-09-13T08:09:00.000Z","path":"2016/09/13/TODO-2：浏览器唤醒APP/","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259(function() &#123; var UA = navigator.userAgent; var isIPad = (UA.match(/(iPad).*OS\\s([\\d_]+)/)) ? true: false; var isIPhone = (!isIPad &amp;&amp; UA.match(/(iPhone\\sOS)\\s([\\d_]+)/)) ? true: false; var isSafari = (isIPhone || isIPad) &amp;&amp; UA.match(/Safari/); var SafariVersion = 0; isSafari &amp;&amp; (SafariVersion = UA.match(/Version\\/([\\d\\.]+)/)); SafariVersion = parseFloat(SafariVersion[1], 10); var isWeixin = navigator.userAgent.indexOf(\"MicroMessenger\") &gt;= 0; var j = false; var s = \"plugIn_downloadAppPlugIn_loadIframe\"; var t = false; var D = &#123;&#125;; var query = null; var J = &#123;&#125;; var isQuery = window.Zepto || window.jQuery ? true: false; var timerAry = []; function bindEvent(P, O, N) &#123; if (isQuery) &#123; query(\"#\" + P).bind(O, N) &#125; else &#123; query(\"#\" + P).addEventListener(O, N, !1) &#125; &#125; if (isQuery) &#123; query = window.$; J = window.$ &#125; else &#123; query = function(N) &#123; if (typeof N == \"object\") &#123; return N &#125; return document.querySelector(N) &#125;; if (!window.$) &#123; window.$ = J = query &#125; else &#123; J = window.$ &#125; &#125; window.onblur = function() &#123; for (var N = 0; N &lt; timerAry.length; N++) &#123; clearTimeout(timerAry[N]) &#125; &#125;; function getCookieByName(P) &#123; var O = document.cookie.indexOf(P + \"=\"); if (O == -1) &#123; return \"\" &#125; O = O + P.length + 1; var N = document.cookie.indexOf(\";\", O); if (N == -1) &#123; N = document.cookie.length &#125; return document.cookie.substring(O, N) &#125; function setCookie(P, R, N, S, Q) &#123; var T = P + \"=\" + escape(R); if (N != \"\") &#123; var O = new Date(); O.setTime(O.getTime() + N * 24 * 3600 * 1000); T += \";expires=\" + O.toGMTString() &#125; if (S != \"\") &#123; T += \";path=\" + S &#125; if (Q != \"\") &#123; T += \";domain=\" + Q &#125; document.cookie = T &#125; function merageConfig(N) &#123; var P = &#123; downAppURl: \"http://static.chunboimg.com/app/\"+$('#andriod_app_download_version').val() || \"ChunBoMall_2.5.2.apk\", downAppIos: \"https://itunes.apple.com/us/app/chun-bo/id967139095?mt=8\", downWeixin: \"http://www.chunbo.com/app/check_app_source\", downIpad: \"https://itunes.apple.com/us/app/chun-bo/id967139095?mt=8\", inteneUrl: \"chunbo://chunbo/startApp\", inteneUrlParams: null, inteneUrlPage: 3, openAppBtnId: \"\", closePanelBtnId: \"\", closePanelId: \"\", closeCallblack: null, closeCallblackSource: null, cookieFlag: null, noRecord: false, sourceType: \"JSHOP_SOURCE_TYPE\", sourceValue: \"JSHOP_SOURCE_VALUE\", openAppEventId: \"MDownLoadFloat_OpenNow\", closePanelEventId: \"MDownLoadFloat_Close\" &#125;; if (N) &#123; for (var O in N) &#123; if (O &amp;&amp; N[O]) &#123; P[O] = N[O] &#125; &#125; &#125; return P &#125; function getSchemaUrlWithParams(P) &#123; var Y = []; var S = P.inteneUrlParams; var ParamsStr = \"\"; if (S &amp;&amp; !S.sourceType &amp;&amp; !S.sourceValue) &#123; S.sourceType = P.sourceType; S.sourceValue = P.sourceValue &#125; if (S) &#123; for (var X in S) &#123; if (X &amp;&amp; S[X]) &#123; Y.push('\"' + X + '\":\"' + S[X] + '\"') &#125; &#125; &#125;// 不调用默认参数,只有传参里面有值才添加到params if (Y.length) &#123; var O = \"&#123;\" + Y.join(\",\") + \"&#125;\"; ParamsStr = \"&amp;params=\" + O &#125; return (P.inteneUrl + \"?page=\" + P.inteneUrlPage + ParamsStr) &#125; function tryOpenApp(P, N) &#123; var T = getSchemaUrlWithParams(P); var Q = null; if (isWeixin) &#123; var O = null; if (j) &#123; O = T &#125; else &#123; O = P.downWeixin &#125; location.href = O; return &#125; if (isIPad) &#123; Q = P.downIpad &#125; else &#123; if (isIPhone) &#123; Q = P.downAppIos &#125; else &#123; Q = P.downAppURl &#125; &#125; if (isSafari &amp;&amp; SafariVersion &gt;= 9) &#123; setTimeout(function() &#123; var U = document.createElement(\"a\"); U.setAttribute(\"href\", T), U.style.display = \"none\", document.body.appendChild(U); var V = document.createEvent(\"HTMLEvents\"); V.initEvent(\"click\", !1, !1), U.dispatchEvent(V) &#125;, 0) &#125; else &#123; document.querySelector(\"#\" + s).src = T &#125; var R = Date.now(); setTimeout(function() &#123; if (N) &#123; var U = setTimeout(function() &#123; openFailTryOpen(R, Q) &#125;, 1500); timerAry.push(U) &#125; &#125;, 100) &#125; function openFailTryOpen(P, O) &#123; var N = Date.now(); if (P &amp;&amp; (N - P) &lt; (1500 + 200)) &#123; window.location.href = O &#125; &#125; function bindOpenBtnClick(N) &#123; if (N.openAppBtnId) &#123; D[N.openAppBtnId] = N;// I(N.openAppBtnId, N.openAppEventId); bindEvent(N.openAppBtnId, \"click\", function() &#123; var R = this.getAttribute(\"id\"); var O = D[R]; if (!t) &#123; var P = document.createElement(\"iframe\"); P.id = s; document.body.appendChild(P); document.getElementById(s).style.display = \"none\"; document.getElementById(s).style.width = \"0px\"; document.getElementById(s).style.height = \"0px\"; t = true &#125; var Q = O.cookieFlag ? \"downloadAppPlugIn_downCloseDate_\" + O.cookieFlag: \"downloadAppPlugIn_downCloseDate\"; setCookie(Q, Date.now() + \"_2592000000\", 1, \"/\", \".chunbo.com\"); tryOpenApp(O, true) &#125;) &#125; &#125; function bindCloseBtnClick (O) &#123; if (O.closePanelBtnId &amp;&amp; O.closePanelId) &#123; D[O.closePanelBtnId] = O;// I(O.closePanelBtnId, O.closePanelEventId); var S = O.cookieFlag ? \"downloadAppPlugIn_downCloseDate_\" + O.cookieFlag: \"downloadAppPlugIn_downCloseDate\"; var Q = getCookieByName(S); var R = null; if (Q) &#123; R = Q.split(\"_\"); if (R.length == 2) &#123; R[0] = parseInt(R[0], 10); R[1] = parseInt(R[1], 10) &#125; else &#123; R = null &#125; &#125; var N = Date.now(); if (!O.noRecord &amp;&amp; R &amp;&amp; R.length == 2 &amp;&amp; (N - R[0]) &lt; R[1]) &#123; document.querySelector(\"#\" + O.closePanelId).style.display = \"none\"; if (O.closeCallblack) &#123; var P = O.closeCallblackSource ? O.closeCallblackSource: null; O.closeCallblack.call(P) &#125; return &#125; else &#123; document.querySelector(\"#\" + O.closePanelId).style.display = \"block\" &#125; bindEvent(O.closePanelBtnId, \"click\", function() &#123; var W = this.getAttribute(\"id\"); var T = D[W]; var V = T.cookieFlag ? \"downloadAppPlugIn_downCloseDate_\" + T.cookieFlag: \"downloadAppPlugIn_downCloseDate\"; if (!T.noRecord) &#123; setCookie(V, Date.now() + \"_259200000\", 1, \"/\", \".chunbo.com\"); &#125; document.querySelector(\"#\" + T.closePanelId).style.display = \"none\"; if (T.closeCallblack) &#123; var U = T.closeCallblackSource ? T.closeCallblackSource: null; T.closeCallblack.call(U) &#125; &#125;) &#125; &#125; function E(N) &#123; var config = merageConfig(N); bindOpenBtnClick(config); bindCloseBtnClick (config) &#125; J.downloadAppPlugIn = E;&#125;)();","tags":[]},{"title":"TODO-1：数组去重方法大全","date":"2016-09-01T05:10:00.000Z","path":"2016/09/01/TODO-1：数组去重方法大全/","text":"前两天看到有一个人在总结面试的时候写到问到了数组去重，说是方法很多。一时手痒把我能想到的都写出来了。 1、最传统的方法，“链式”检索，这个方法虽说是双层for循环嵌套，但是能够保留数组原有的顺序，对于有顺序要求的可以用这个，而且可以兼容低版本浏览器。 123456789101112131415161718let ary = [2,324,35,2,36,1,2,5,3,51,31,2,5,2,24,5,46,789,0,'2','2'];function uniq (ary)&#123; let l = ary.length, isRepeat = false, res = []; res[0] = ary[0]; for(let i = 1; i &lt; l; ++i)&#123; isRepeat = false; for(let j = 0; j &lt; res.length; ++j)&#123; if(res[j] === ary[i]) &#123;isRepeat =true; break;&#125; &#125; !isRepeat &amp;&amp; res.push(ary[i]) &#125; return res;&#125; 2、利用对象的属性不能重复的特性，但是对象的属性不能保留定义的时候的顺序，所以这个方法会破坏原有数组的顺序。 tips:为了防止太多重复，之后的代码都只写关键部分，同时用了箭头函数。 123456let obj = &#123;&#125;;ary.forEach(e=&gt;&#123; if(obj[e] !== e) &#123;res.push(e);obj[e] = e;&#125; return true;&#125;) 3、在数组中检索，能够被检索到便认为是重复，思路感觉跟第一个方法略有些相似1234res.push(ary[0]);ary.forEach(e=&gt;&#123; if(res.indexOf(e) == -1) &#123;res.push(e)&#125;&#125;) 4、先将数组排序，将相邻相同的值去掉，但是这个只适用于数据类型一致的数组。当然也破坏了原有的数组，如果想要不破坏数据源，可以先拷贝一份。123ary.sort().forEach((e, i, array)=&gt;&#123; if(e !== array[i-1]) res.push(e);&#125;) 5、利用数据的筛选和some等方法，主要思路同方法一，但是这个方法的效率应该是不如方法一的，毕竟每次都要拷贝一个新的数组。 1ary.filter((e, i, array)=&gt;!array.slice(i+1).some(ele=&gt;ele === e)); 如果想要保证原有的顺序，可以先倒序数组。 1ary.reverse().filter((e, i, array)=&gt;!array.slice(i+1).some(ele=&gt;ele === e)).reverse(); 6、最后一个是ES6提供的新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。 1res = [ ...new Set(ary)]; 哈哈，是不是看起来炒鸡棒！","tags":[]},{"title":"fadora 23 dnf 更新错误","date":"2016-07-22T00:29:00.000Z","path":"2016/07/22/fadora 23 dnf 更新错误/","text":"问题：执行sudo dnf update报错： 123上次元数据过期检查：0:27:28 前，执行于 Fri Jul 22 07:42:36 2016。 依赖关系解决。 错误：该操作将导致移除已启动的内核：kernel-core-4.5.7-202.fc23.x86_64 。 解决方法： sudo dnf remove python3-dnf-plugins-core -y 参考： https://bugzilla.redhat.com/show_bug.cgi?id=1348766","tags":[]}]